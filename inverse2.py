import numpy as np
from matplotlib import pyplot as plt
import matplotlib.gridspec as gridspec
from matplotlib.ticker import AutoMinorLocator
import math as mth
import random

fg = plt.figure(figsize=(14, 7), constrained_layout=True) #11 9
gs = gridspec.GridSpec(ncols=2, nrows=2, figure=fg)
ax_1 = fg.add_subplot(gs[0, 0])
ax_2 = fg.add_subplot(gs[0, 1])
ax_3 = fg.add_subplot(gs[1, 0])
ax_4 = fg.add_subplot(gs[1, 1])




sled_P_1 = [0.0, -0.0025059542318137287, -0.005036453553824486, -0.007587061200627448, -0.010153239421282436, -0.0127303682260387, -0.01531376456437996, -0.017898701840161305, -0.020480429667171417, -0.02305419376665774, -0.025615255907218852, -0.02815891378701092, -0.030680520758440098, -0.03317550529641851, -0.03563939011284116, -0.03806781082217778, -0.04045653406594678, -0.04280147500731826, -0.0450987141111454, -0.047344513129306556, -0.04953533021631123, -0.05166783410562769, -0.053738917283078634, -0.055745708099863976, -0.057685581774249865, -0.059556170237648316, -0.06135537078764259, -0.06308135351742879, -0.06473256749808325, -0.0663077456969723, -0.0678059086224383, -0.06922636669157213, -0.07056872132437013, -0.07183286477382508, -0.07301897870748106, -0.07412753156165235, -0.07515927469483949, -0.07611523737184811, -0.07699672061470715, -0.07780528996068314, -0.07854276717148734, -0.0792112209411703, -0.0798129566531989, -0.08035050523982074, -0.08082661119905152, -0.08124421982649141, -0.08160646372070357, -0.08191664862209443, -0.08217823864614852, -0.08239484097251529, -0.08257019005184654, -0.08270813139247661, -0.08281260498904314, -0.08288762845499764, -0.08293727992067791, -0.08296568075822962, -0.08297697819420366, -0.08297532787012915, -0.08296487641079707, -0.08294974405939426, -0.08293400743801564, -0.08292168249146295, -0.08291670767161416, -0.08292292741901765, -0.08294407599773139, -0.08298376173877546, -0.08304545174689512, -0.08313245712462033, -0.08324791876684418, -0.0833947937783095, -0.08357584256546444, -0.08379361665310853, -0.08405044727507084, -0.08434843478682114, -0.08468943894638797, -0.08507507010821991, -0.08550668137265437, -0.08598536173143481, -0.08651193024721528, -0.08708693130220217, -0.08771063094798784, -0.08838301438522031, -0.08910378459802518, -0.08987236216404054, -0.0906878862565569, -0.091549216850568, -0.09245493813955849, -0.09340336316459089, -0.09439253965173529, -0.09542025704813581, -0.09648405474106576, -0.09758123143821928, -0.09870885568127263, -0.09986377745846146, -0.10104264087561482, -0.10224189783881507, -0.10345782269566847, -0.10468652777613088, -0.1059239797679949, -0.10716601685656472, -0.10840836655278123, -0.10964666412916352, -0.11087647157846614, -0.11209329700594935, -0.11329261436268452, -0.11446988342439736, -0.11562056991803057, -0.11674016569651792, -0.11782420886121793, -0.11886830373108874, -0.11986814055799899, -0.12081951488856743, -0.12171834647460365, -0.12256069763658144, -0.12334279098757796, -0.12406102642875726, -0.12471199733170822, -0.12529250582775095, -0.1257995771296398, -0.12623047281688018, -0.12658270302208086, -0.1268540374623271, -0.12704251526642904, -0.12714645355600135, -0.12716445474561291, -0.12709541253463633, -0.12693851657086982, -0.126693255773426, -0.12635942030973693, -0.12593710222873855, -0.125426694759328, -0.12482889028997692, -0.1241446770518855, -0.12337533453423827, -0.12252242766593478, -0.12158779980358138, -0.12057356457053153, -0.11948209659631183, -0.11831602120988173, -0.11707820314381419, -0.11577173430966808, -0.11439992070754812, -0.1129662685351188, -0.11147446956318206, -0.10992838584634354, -0.10833203383831545, -0.1066895679820606, -0.10500526384527627, -0.10328350087172103, -0.10152874481858039, -0.09974552994952927, -0.09793844105237684, -0.09611209534922331, -0.09427112436594369, -0.09242015582656632, -0.09056379563677146, -0.08870661001930864, -0.08685310786265453, -0.08500772334272193, -0.08317479887589753, -0.08135856846014587, -0.07956314145938138, -0.0777924868847796, -0.07605041822517611, -0.0743405788771845, -0.07266642822415044, -0.07103122841152887, -0.0694380318647278, -0.06788966959387699, -0.06638874032834022, -0.06493760052208439, -0.06353835526921231, -0.06219285016704934, -0.06090266416211987, -0.059669103412138075, -0.05849319619474608, -0.05737568889113822, -0.056317043069909346, -0.055317433693417746, -0.05437674846566771, -0.05349458833717843, -0.05267026917849611, -0.051902824629941294, -0.051191010130852574, -0.05053330812700625, -0.049927934450062265, -0.049372845857836294, -0.04886574871894213, -0.04840410881991318, -0.047985162267331405, -0.04760592745180232, -0.047263218034849085, -0.04695365691401391, -0.04667369111568038, -0.04641960755943285, -0.046187549632190766, -0.045973534504948815, -0.04577347111978271, -0.045583178769887794, -0.045398406190864]




sled_P_2 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00010219247954062235, -0.00036429096216385615, -0.0007855435638858959, -0.0013647345252249111, -0.002100181688899939, -0.002989735491206088, -0.004030779537306244, -0.005220232823709717, -0.00655455366327872, -0.008029745359264411, -0.00964136366518816, -0.011384525639193175, -0.01325391985398017, -0.015243818310549037, -0.01734809018750514, -0.019560217410536613, -0.021873312013829513, -0.024280135252201455, -0.02677311840973405, -0.02934438523780518, -0.03198577594280003, -0.03468887263155122, -0.03744502611085821, -0.04024538392639646, -0.04308091951606931, -0.04594246234349613, -0.04882072886897661, -0.051706354208018265, -0.05458992432145009, -0.05746200857633821, -0.060313192513429995, -0.06313411065472092, -0.06591547918399163, -0.06864812833381125, -0.07132303431454047, -0.07393135062427146, -0.07646443858337523, -0.07891389694333258, -0.08127159042673911, -0.08352967706370923, -0.08568063419927094, -0.08771728305662807, -0.08963281175226251, -0.0914207966706238, -0.09307522211848199, -0.09459049819176406, -0.09596147680072041, -0.09718346581242839, -0.09825224128281033, -0.0991640577633749, -0.09991565668065981, -0.10050427279873667, -0.10092763878701067, -0.10118398792680751, -0.10127205500078695, -0.10119107541896094, -0.10094078264396429, -0.10052140398614688, -0.09993365484598898, -0.09930917693459893, -0.09867782919107472, -0.09803948950004866, -0.09739405873963076, -0.09674146221600412, -0.0960816510313979, -0.09541460337776396, -0.09474032574877388, -0.09405885406307063, -0.0933702546920653, -0.09267462538595803, -0.09197209502562985, -0.09126282242864285, -0.09054699493320138, -0.08982482690616449, -0.08909655818225122, -0.08836245244182865, -0.08762279553488748, -0.0868778937589879, -0.0861280720991015, -0.0853736724373804, -0.08461505174095006, -0.08385258023585677, -0.08308663957530428, -0.08231762101027691, -0.08154592357057795, -0.08077195226419231, -0.07999611630273297, -0.07921882736053487, -0.07844049787472836, -0.0776615393933579, -0.0768823609783033, -0.07610336766942714, -0.0753249590159981, -0.07454752768104227, -0.0737714581238453, -0.07299712536537847, -0.07222489384094448, -0.07145511634384812, -0.07068813306338485, -0.0699242707199201, -0.06916384179929665, -0.06840714388827064, -0.06765445911213283, -0.06690605367512815, -0.06616217750374892, -0.06542306399244102, -0.06468892985073962, -0.06395997505033839, -0.06323638287009928, -0.06251832003653045, -0.06180593695680183, -0.061099368040931024, -0.0603987321093614, -0.05970413288176926, -0.05901565954258168, -0.0583333873783596, -0.05765737848190683, -0.05698768251770175, -0.05648302437127343, -0.05614301188414217, -0.05596531872703087, -0.05594715962284629, -0.056085293588526576, -0.056376028737550946, -0.0568152286901246, -0.057398320630223265, -0.05812030504001666, -0.05897576713274064, -0.05995888999493348, -0.061063467460206286, -0.06228291765792281, -0.0636102982596835, -0.06503832344843984, -0.06655938257965731, -0.06816556049123787, -0.06984865940619682, -0.07160022235949348, -0.07341155806807553, -0.07527376715124853, -0.07717776959705663, -0.07911433335960046, -0.08107410396225127, -0.0830476349726445, -0.0850254192072553, -0.08699792051636925, -0.08895560599444204, -0.09088897845627261, -0.09278860901614162, -0.09464516960514201, -0.09644946526137084, -0.0981924660284755, -0.09986533830024487, -0.10145947545248712, -0.10296652760829983, -0.10437843038896323, -0.10568743251000672, -0.10688612209042675, -0.10796745155248118, -0.10892476099984207, -0.10975179997304264, -0.11044274749297721, -0.11099223031558532, -0.11139533933362006, -0.11164764407445485, -0.11174520525605346, -0.11168458537640595, -0.1114628573247627, -0.11107761101576094, -0.1105269580599029, -0.10980953449569929, -0.10892450162002036, -0.1078715449637116, -0.10665087146923564, -0.10526320493592395, -0.1037097798063, -0.10199233337381836, -0.10013991017084092, -0.09828802877821623, -0.09643646924617771, -0.09458505700553103, -0.09273366547606579, -0.0908822185287936, -0.08903069278723766, -0.0871791197536482, -0.08532758774675107, -0.08347624363843147, -0.08162529437760724, -0.07977500807124167, -0.07792571196630178, -0.07607778925209484]





sled_P_3 = [0.0, -0.0028017906010566074, -0.005851198270017573, -0.00915255975393196, -0.01270747554664046, -0.01651478714493982, -0.020570580223757805, -0.024868214129099786, -0.029398377833120753, -0.034149172218035526, -0.03910621825865669, -0.04425279036208196, -0.04956997380323364, -0.05503684487306863, -0.06063067203931037, -0.06632713611476565, -0.07210056714298123, -0.07792419545227483, -0.08377041410370435, -0.08961104977231885, -0.0954176389591803, -0.10116170633822474, -0.10681504199990192, -0.11234997436425621, -0.11773963559988553, -0.12295821650086793, -0.12798120793877815, -0.13278562621758813, -0.13735021991069157, -0.14165565604571073, -0.1456846838175664, -0.1494222743464129, -0.15285573534705854, -0.15597479993290422, -0.15877168913292078, -0.16124114804776774, -0.163380455904429, -0.16518941058201936, -0.1666702884698658, -0.16782778077871255, -0.16866890765406967, -0.16920291163546977, -0.16944113216588982, -0.16939686298194873, -0.16908519430870206, -0.16852284184468705, -0.1677279645557174, -0.1667199733026916, -0.16551933231260232, -0.16414735546646433, -0.1626259993265193, -0.1609776547612271, -0.15922493895344939, -0.15739048949773393, -0.15549676220925576, -0.15356583418176206, -0.1516192135463688, -0.1496776572982657, -0.147760998474816, -0.1458879838862041, -0.14407612351826884, -0.142341552645665, -0.1406989076109283, -0.13916121614007196, -0.13773980297660132, -0.1364442115218534, -0.13528214206900285, -0.1342594071097332, -0.13337990407554637, -0.1326456057493783, -0.13205656844742827, -0.13161095792614907, -0.13130509281592195, -0.13113350522225883, -0.13108901796912906, -0.13116283778931204, -0.13134466359605027, -0.1316228088015613, -0.13198433648423777, -0.1324152060508661, -0.13290042989621112, -0.13342423843306844, -0.13397025175446098, -0.1345216560988384, -0.13506138322137262, -0.13557229073171523, -0.13603734144235716, -0.1364397797829014, -0.1367633033743909, -0.1369922279239859, -0.13711164369276804, -0.13710756190669102, -0.13696704962057415, -0.13667835170491385, -0.13623099880214293, -0.13561590028943868, -0.1348254214856764, -0.1338534445469418, -0.13269541270441823, -0.13134835770680545, -0.12981091053321633, -0.12808329563852833, -0.1261673091785246, -0.12406628183435629, -0.12178502701279977, -0.11932977533884649, -0.11670809647919711, -0.11392880943852116, -0.11100188255463321, -0.10793832448415695, -0.10475006751731962, -0.10144984459002895, -0.09805106137441974, -0.09456766482686087, -0.09101400955637345, -0.08740472334799382, -0.0837545731362779, -0.08007833267534492, -0.07639065309494403, -0.07270593746826026, -0.06903822044767084, -0.06540105395038445, -0.06180739979765667, -0.05826953012973266, -0.05479893633433005, -0.05140624713973744, -0.04810115643474769, -0.04489236128688219, -0.0417875105378647, -0.03879316426122479, -0.03591476427142749, -0.033156615777260826, -0.030521880174664017, -0.028012578876135855, -0.025629607975828566, -0.023372763452026508, -0.021240776512672654, -0.01923135859579869, -0.017341255446100344, -0.015566309602527502, -0.013901530550747342, -0.01234117171983441, -0.010878813435702891, -0.009507450885740239, -0.008219586100886966, -0.007007322923989948, -0.005862463907445035, -0.004776608069603169, -0.003741248438591784, -0.0027478683243514377, -0.0017880352848282772, -0.0008534917901758891, 6.375836093946313e-05, 0.0009713687569497951, 0.001876575032292921, 0.0027861261986975613, 0.0037062232872208576, 0.004642465841713386, 0.005599806701187496, 0.006582515401461553, 0.007594150417050847, 0.008637540354196319, 0.009714774096746946, 0.010827199799847736, 0.011975432523459324, 0.013159370199931623, 0.014378217538345568, 0.015630517384110348, 0.0169141889762129, 0.018226572477224087, 0.019564479093185594, 0.020924246052176607, 0.022301795671881803, 0.023692697717910393, 0.025092234235877295, 0.02649546603116743, 0.027897299970592326, 0.029292556289458285, 0.03067603510547941, 0.03204258136702531, 0.033387147496880626, 0.03470485303348776, 0.03599104061897984, 0.03724132773662595, 0.038451653659010904, 0.03961832113175994, 0.04073803238527661, 0.04180791913815662, 0.04282556633001297, 0.043789029397726824, 0.044696844986908985, 0.04554803506889839, 0.04634210451216518, 0.0470790322347527, 0.04775925614056697, 0.0483836521160911, 0.048953507434628195, 0.049470488981637604, 0.04993660677631333, 0.050354173320479964]



sled_P_4 = [0.0, -8e-05, -0.00023999974400000003, -0.00047999718400081927, -0.0007999866880221185, -0.0011999572482072575, -0.0016798906891526118, -0.0022397598766677783, -0.002879526927241894, -0.003599141418560056, -0.004398538601482577, -0.005277637613968441, -0.006236339697492968, -0.007274526416578132, -0.00839205788212232, -0.009588770979284513, -0.010864477600745819, -0.012218962886238914, -0.013651983469303495, -0.015163265732292753, -0.0167525040707226, -0.018419359168121555, -0.020163456282604814, -0.021984383546461293, -0.02388169028010653, -0.025854885321818344, -0.027903435374735042, -0.030026763372657615, -0.032224246866259056, -0.03449521643136333, -0.0368389541010158, -0.03925469182312474, -0.041741609945509066, -0.04429883573024355, -0.04692544189924526, -0.04962044521309715, -0.052382805085154714, -0.05521142223302985, -0.058105137369592524, -0.061062729935674506, -0.06408291687670233, -0.06716435146552578, -0.07030562217374516, -0.07350525159387718, -0.07676169541472873, -0.08007334145237989, -0.08343850873920151, -0.08685544667335891, -0.09032233423127041, -0.0938372792455087, -0.09739831775064599, -0.1008434133995532, -0.10417181375267073, -0.10738284183951269, -0.11047589534545865, -0.11345044575380045, -0.11630603744574652, -0.11904228676102685, -0.12165888102167272, -0.12415557752148491, -0.1265322024836274, -0.12878864998871595, -0.1309248808756957, -0.13294092161772286, -0.13483686317519236, -0.13661285982796795, -0.1382691279887923, -0.13980594499977325, -0.14122364791375427, -0.14252263226229434, -0.14370335081189697, -0.1447663123100392, -0.1457120802224639, -0.14654127146311383, -0.14725455511799246, -0.14785265116415164, -0.1483363291849183, -0.14870640708238023, -0.1489637497880652, -0.14910926797266025, -0.1491439167555299, -0.1490686944147039, -0.14888464109792146, -0.14859283753523228, -0.14819440375357115, -0.1476904977936394, -0.14708231442934303, -0.14637108388996076, -0.14555807058513193, -0.14464457183267693, -0.1436319165891889, -0.14252146418325762, -0.14131460305111684, -0.14001274947443162, -0.13861734631987552, -0.13712986178008038, -0.13555178811547255, -0.1338846403964509, -0.13212995524529803, -0.130289289577156, -0.12836421933934514, -0.12651633824824526, -0.12474469652290888, -0.12304837818309002, -0.12142649792095445, -0.11987819799790786, -0.11840264516714724, -0.11699902762263284, -0.11566655197525774, -0.11440444025707908, -0.11321192695455291, -0.11208825607179408, -0.11103267822495899, -0.11004444776892269, -0.10912281995749555, -0.10826704813849292, -0.10747638098504221, -0.10675005976457512, -0.10608731564701822, -0.10548736705375786, -0.10494941704901362, -0.10447265077531318, -0.10405623293481725, -0.10369930531829545, -0.10340098438360686, -0.10316035888558586, -0.10297648755928158, -0.10284839685854395, -0.10277507875198758, -0.10275548857840923, -0.10278854296376595, -0.10287311780185686, -0.10300804630088577, -0.10319211709810293, -0.10342407244475776, -0.10370260646361049, -0.10402636348127527, -0.10439393643767994, -0.10480386537494195, -0.10525463600797212, -0.10574467837912083, -0.10627236559918658, -0.1068360126771076, -0.10743387544064782, -0.10806414955038979, -0.10872496960932394, -0.10941440837032035, -0.11013047604373699, -0.11087111970740714, -0.11163422282120927, -0.11241760484840034, -0.11305902098584751, -0.11356007880526185, -0.11392242992686323, -0.11414776926315082, -0.11423783423517689, -0.114194403964418, -0.11401929844318406, -0.11371437768636616, -0.11328154086716799, -0.11272272543932467, -0.11203990624815656, -0.11123509463266035, -0.11031033752068962, -0.10926771651912807, -0.10810934700080811, -0.1068373771897831, -0.10545398724641192, -0.10396138835356887, -0.10236182180514941, -0.1006575580978957, -0.09885089602742911, -0.09694416178923244, -0.09493970808519153, -0.09283991323616732, -0.09064718030093975, -0.08836393620173238, -0.08599263085640009, -0.08353573631723867, -0.08099574591625218, -0.07837517341659678, -0.07567655216980541, -0.07290243427828483, -0.07005538976247114, -0.06713800573192479, -0.06415288555954549, -0.06110264805799465, -0.05798992665731698, -0.05481736858266963, -0.05158763403098177, -0.04830339534528906, -0.0449673361854146, -0.0415821506935972, -0.03815054265360479, -0.03467522464180863, -0.031158917168640266, -0.027604347808805413, -0.024014250318576718, -0.020391363738456757, -0.0167384314794593]

N = 200
h = 0.02

#fg.suptitle('Красное - решение обратной задачи, \n синее - решение прямой задачи')
#'N = ' + str(N) + ', h = ' + str(h) + 
Q_1 = np.zeros(N, dtype=np.float)
Q_2 = np.zeros(N, dtype=np.float)
Q_3 = np.zeros(N, dtype=np.float)
Q_4 = np.zeros(N, dtype=np.float)
#ampl_sin = 0.2 #0.0002
#k_sin =  0.03  #1.0 / 45.0
#for i in range(0, N) :
#    value = ampl_sin * mth.sin(mth.pi * i * k_sin - 0.5)
#    if value < 0 :
#        Q[i] = 0
#    else :
#        Q[i] = value 

#******FIRST PROBLEM******************
#ampl_sin = 0.1 #0.0002
#k_sin =  0.03  #1.0 / 45.0
#for i in range(0, N) :
#   value = 0.2 + ampl_sin * mth.cos(mth.pi * i * k_sin - 0.5)
#   if value < 0 :
#        Q_1[i] = 0
#    else :
#        Q_1[i] = value

ampl_sin = 0.05 #0.0002
k_sin =  0.02  #1.0 / 45.0
for i in range(0, N) :
    value = 0.08 + ampl_sin * mth.cos(mth.pi * i * k_sin - 0.5)
    if value < 0 :
        Q_1[i] = 0
    else :
        Q_1[i] = value


#**********SECOND PROBLEM************************
ampl_sin = 0.15 #0.0002
k_sin =  0.017  #1.0 / 45.0
for i in range(0, N) :
    value = ampl_sin * mth.sin(mth.pi * i * k_sin - 0.5)
    if value < 0 :
        Q_2[i] = 0
    else :
        Q_2[i] = value 

#*****************************THIRD PROBLEM********************
ampl_sin = 0.15 #0.0002
k_sin =  0.03  #1.0 / 45.0
shift = 0.2
for i in range(0, N) :
    value = shift * (1.0 - i/N)  + ampl_sin *(1 - i/N) * mth.sin(mth.pi * i * k_sin - 0.5)
    if value < 0.0 :
        Q_3[i] = 0.0
    else : 
        Q_3[i] = value 


#********************FOURTH PROBLEM************************
ampl_sin = 0.2 #0.15
k_sin =  0.03  #1.0 / 45.0
for i in range(0, N) :
    if i < 50 :
        Q_4[i] = 0.0 + i*((ampl_sin)/(50))
    elif i < 100 :
        Q_4[i] = ampl_sin + (i - 50)*((0.0 - ampl_sin)/(50))
    elif i < 150 :
        Q_4[i] = 0.0 + (i - 100)*((ampl_sin)/(50))
    else :
        Q_4[i] = ampl_sin + (i - 150)*((0.0 - ampl_sin)/(50))





def solve_inverse5(N, sled_P, diagU, h):
    print('N: ' + str(N) + ' diag: ' + str(diagU) + ' h: ' + str(h))
    q = np.zeros(N - 1)
    U = np.zeros((2 * N, N))
    P = np.zeros((2 * N, N))
    for i in range(0, N) :
        U[i][i] = diagU
    for i in range(0, len(sled_P)) :
        P[2*i][0] = sled_P[i] * h
    q[0] = sled_P[1] / ( 1 * (2*U[2][0] - 1.0));#   hhhhhhhhhhhhhhhh
    U[2][0] = 2*h*P[0][0] + U[0][0]
    for i in range(1, len(q)) :
        m = i + 1
        for k in range(1, m - 1):
            sl = (m - 1)*2 - k
            P[sl][k] = P[sl + 1][k - 1] + (h*q[k - 1]*(2*U[sl + 1][k -  1] - 1.0))#
        U[2*m][0] = 2*h*P[2*m - 2][0] + U[2*m - 2][0]
        for k in range(1, m):
            sl = 2*m - k
            U[sl][k] = U[sl - 1][k - 1] + (h * P[sl - 1][k - 1])
        tmp_sum = 0
        for k in range(0, m - 1):
            sl = 2*m - k
            tmp_sum += (1*q[k] * (2*U[sl][k] - 1.0))# hhhhhhhhhhhhhhhhhhhhhhhhhh
        q[i] = -1 * (tmp_sum + sled_P[m] ) / (1*(2*U[2*m - i][i] - 1.0)) #hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
    return q, U, P

#inv_result, inv_W, inv_R = solve_inverse5(len(sled_P), sled_P, 1, h)

max_1 = max([abs(i) for i in sled_P_1])
max_2 = max([abs(i) for i in sled_P_2])
max_3 = max([abs(i) for i in sled_P_3])
max_4 = max([abs(i) for i in sled_P_4])

for i in range(0, len(sled_P_1)):
    sled_P_1[i]  = sled_P_1[i] /h
    sled_P_2[i]  = sled_P_2[i] /h
    sled_P_3[i]  = sled_P_3[i] /h
    sled_P_4[i]  = sled_P_4[i] /h

sled_P_1_p = [sled_P_1[0]]
sled_P_2_p = [sled_P_2[0]]
sled_P_3_p = [sled_P_3[0]]
sled_P_4_p = [sled_P_4[0]]
my_seed = 11
random.seed(my_seed)
percent = 0.03
print(max_1, max_2, max_3, max_4)
for i in range(1, len(sled_P_1)):
    sled_P_1_p.append(sled_P_1[i] + max_1*percent*random.uniform(-1, 1))
    sled_P_2_p.append(sled_P_2[i] + max_2*percent*random.uniform(-1, 1))
    sled_P_3_p.append(sled_P_3[i] + max_3*percent*random.uniform(-1, 1))
    sled_P_4_p.append(sled_P_4[i] + max_4*percent*random.uniform(-1, 1))


inv_result_1, inv_W_1, inv_R_1 = solve_inverse5(len(sled_P_1), sled_P_1, 1, h)
inv_result_2, inv_W_2, inv_R_2 = solve_inverse5(len(sled_P_2), sled_P_2, 1, h)
inv_result_3, inv_W_3, inv_R_3 = solve_inverse5(len(sled_P_3), sled_P_3, 1, h)
inv_result_4, inv_W_4, inv_R_4 = solve_inverse5(len(sled_P_4), sled_P_4, 1, h)

inv_result_1_p, W1, R1 = solve_inverse5(len(sled_P_1_p), sled_P_1_p, 1, h)
inv_result_2_p, W2, R2 = solve_inverse5(len(sled_P_2_p), sled_P_2_p, 1, h)
inv_result_3_p, W3, R3 = solve_inverse5(len(sled_P_3_p), sled_P_3_p, 1, h)
inv_result_4_p, W4, R4 = solve_inverse5(len(sled_P_4_p), sled_P_4_p, 1, h)

print(max(np.absolute(Q_1[:199] - inv_result_1))/max(Q_1[:199]))
print(max(np.absolute(Q_2[:199] - inv_result_2))/max(Q_2[:199]))
print(max(np.absolute(Q_3[:199] - inv_result_3))/max(Q_3[:199]))
print(max(np.absolute(Q_4[:199] - inv_result_4))/max(Q_4[:199]))
print('\n' + str(my_seed) + '\n')
print(max(np.absolute(inv_result_1_p - Q_1[:199]))/max(Q_1[:199]))
print(max(np.absolute(inv_result_2_p - Q_2[:199]))/max(Q_2[:199]))
print(max(np.absolute(inv_result_3_p - Q_3[:199]))/max(Q_3[:199]))
print(max(np.absolute(inv_result_4_p - Q_4[:199]))/max(Q_4[:199]))



def setlabel(AX):
    AX.set_xlabel('i')
    AX.set_ylabel('q', rotation=0)


null_y_axis2 = ([0, len(Q_1)],[0, 0])

ax_1.set_ylim(-0.05, 0.5)
ax_1.plot(null_y_axis2[0], null_y_axis2[1], color='lime')
#ax_1.plot(inv_result_1_p, color='black', ls='-')
ax_1.plot(inv_result_1, color='red', ls='-')
ax_1.plot(Q_1, color='blue', ls='--')
setlabel(ax_1)

ax_2.set_ylim(-0.05, 0.5)
ax_2.plot(null_y_axis2[0], null_y_axis2[1], color='lime')
#ax_2.plot(inv_result_2_p, color='black', ls='-')
ax_2.plot(inv_result_2, color='red', ls='-')
ax_2.plot(Q_2, color='blue', ls='--')
setlabel(ax_2)

ax_3.set_ylim(-0.05, 0.5)
ax_3.plot(null_y_axis2[0], null_y_axis2[1], color='lime')
#ax_3.plot(inv_result_3_p, color='black', ls='-')
ax_3.plot(inv_result_3, color='red', ls='-')
ax_3.plot(Q_3, color='blue', ls='--')
setlabel(ax_3)

ax_4.set_ylim(-0.05, 0.5)
ax_4.plot(null_y_axis2[0], null_y_axis2[1], color='lime')
#ax_4.plot(inv_result_4_p, color='black', ls='-')
ax_4.plot(inv_result_4, color='red', ls='-')
ax_4.plot(Q_4, color='blue', ls='--')
setlabel(ax_4)

#null_y_axis = ([0, len(sled_P)],[0, 0])
#0ax_1.plot(null_y_axis[0], null_y_axis[1], color='lime')
#ax_2.plot(null_y_axis[0], null_y_axis[1], color='lime')
#null_y_axis2 = ([0, len(Q)],[0, 0])

#ax_3.set_title('U')
#img_3 = ax_3.imshow(inv_W, cmap='gist_rainbow', vmin=-1, vmax=1)#, interpolation='bilinear')
#fg.colorbar(img_3, ax=ax_3)
#ax_4.set_title('P')
#img_4 = ax_4.imshow(inv_R, cmap='gist_rainbow', vmin=-1, vmax=1)#, interpolation='bilinear')
#fg.colorbar(img_4, ax=ax_4)


#ax_6.set_ylim(-1.0, 1.0)
#ax_6.set_title('След решения P')
#ax_6.plot(sled_P, color='black')
#ax_6.plot(null_y_axis[0], null_y_axis[1], color='lime')

#ax_7.set_ylim(-0.5, 1)
#ax_7.set_title(' |Q - Q\'| ')
#ax_7.plot(null_y_axis[0], null_y_axis[1], color='lime')

#pogr_percent = np.absolute(inv_result  - Q)
#for i in range(0, len(pogr_percent)):
#    if Q[i] == 0.0:
#        pogr_percent[i] = pogr_percent[i]
#    pogr_percent[i] = pogr_percent[i] / (Q[i])
#ax_7.plot(pogr_percent, color='black')





#**********************************************************************************************
#ax_2.set_ylim(-0.001, 1.0)
#ax_2.set_title('Красное - решение обратной задачи, \n синее - решение прямой задачи')
#ax_2.plot(null_y_axis2[0], null_y_axis2[1], color='lime')
#ax_2.plot(inv_result, color='red', ls='--')
#ax_2.plot(Q, color='blue', ls='--')
#ax_2.plot(inv_result_new, color='green', ls='--')
#***************************************************************************************************
#ax_1.set_ylim(-0.001, 1.0)
#ax_1.set_title('0.00001 * mth.sin(10000*i)')
#ax_1.set_title('из прямой задачи q(x) = 0.2 + A * cos(pi * k * x - 0.5), A = ' + str(ampl_sin) + ' k = ' + str(k_sin))
#ax_1.plot(null_y_axis2[0], null_y_axis2[1], color='lime')
#ax_1.plot(Q, color='red')

plt.show()
